import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt
(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Kullanıcıları ve ilgi alanlarını saklama
users = {}
interests = defaultdict(list)

# Graf oluşturma
G = nx.DiGraph()

for user_data in data:
    username = user_data['username']
    users[username] = user_data
    G.add_node(username)
    
    for following in user_data['following']:
        G.add_edge(username, following)
        
    for tweet in user_data['tweets']:
        for word in tweet.split():
            interests[word].append(username)

# İlgi alanına göre arama
def search_interest(interest):
    return interests.get(interest, None)

# Ortak ilgi alanlarına sahip kullanıcıları bulma
def common_interests(user1, user2):
    user1_interests = set(word for tweet in users[user1]['tweets'] for word in tweet.split())
    user2_interests = set(word for tweet in users[user2]['tweets'] for word in tweet.split())
    return user1_interests & user2_interests

# İki kullanıcı arasında bir yol olup olmadığını kontrol etme
def has_path(user1, user2):
    return nx.has_path(G, user1, user2)

# Minimum Spanning Tree oluşturma
def minimum_spanning_tree():
    return nx.minimum_spanning_tree(G.to_undirected())
interest = 'Python'
users_with_interest = search_interest(interest)
if users_with_interest:
    print(f"Kullanıcılar {interest} ilgi alanina sahip: {users_with_interest}")
else:
    print(f"{interest} ilgi alanina sahip hiçbir kullanici bulunamadi.")
# Kullanıcı istatistikleri için fonksiyon
def user_statistics(username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data['followers'])
        following_count = len(user_data['following'])
        tweet_count = len(user_data['tweets'])

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph():
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()

# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input():
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = search_interest(interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

# Kullanıcı istatistikleri örneği
user_statistics('sample_username')

# Graf görselleştirme örneği
visualize_graph()

# Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
search_interest_by_user_input()
------------------------------------------------------------------
2.güncelleme
import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt

class User:
    def __init__(self, username, full_name, followers_count, following_count, language, region, tweets, following, followers):
        self.username = username
        self.full_name = full_name
        self.followers_count = followers_count
        self.following_count = following_count
        self.language = language
        self.region = region
        self.tweets = tweets
        self.following = following
        self.followers = followers

# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Kullanıcıları ve ilgi alanlarını saklama
users = {}
interests = defaultdict(list)

# Graf oluşturma
G = nx.DiGraph()

for user_data in data:
    username = user_data['username']
    user_obj = User(
        username,
        user_data['full_name'],
        user_data['followers_count'],
        user_data['following_count'],
        user_data['language'],
        user_data['region'],
        user_data['tweets'],
        user_data['following'],
        user_data['followers']
    )
    users[username] = user_obj
    G.add_node(username)

    for following in user_obj.following:
        G.add_edge(username, following)

    for tweet in user_obj.tweets:
        for word in tweet.split():
            interests[word].append(username)
# İlgi alanına göre eşleme
def search_interest(interest):
    return interests.get(interest, None)

# Belirli bölge ve dil için trend olan hashtagler
def trending_hashtags(region, language):
    hashtags = defaultdict(int)

    for user_obj in users.values():
        if user_obj.region == region and user_obj.language == language:
            for tweet in user_obj.tweets:
                words = [word.strip("#") for word in tweet.split() if word.startswith("#")]
                for hashtag in words:
                    hashtags[hashtag] += 1

    sorted_hashtags = sorted(hashtags.items(), key=lambda x: x[1], reverse=True)
    return sorted_hashtags

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme
def common_interest_followers(user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = [username for username in common_followers if search_interest(users[username].language)]
    return common_interest_users

# Graf Üzerinde Analiz
def analyze_graph(start_user, level):
    result = list(nx.bfs_edges(G, source=start_user, depth_limit=level))
    return result

# Kullanıcı istatistikleri örneği
user_statistics('sample_username')

# Graf görselleştirme örneği
visualize_graph()

# Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
search_interest_by_user_input()

# Belirli bölge ve dil için trend olan hashtagler örneği
trending = trending_hashtags("Region1", "English")
print("Trending Hashtags:")
for hashtag, count in trending[:5]:
    print(f"{hashtag}: {count} tweets")

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme örneği
common_interest_users = common_interest_followers('user1', 'user2')
print("Common Interest Followers:")
print(common_interest_users)

# Graf Üzerinde Analiz örneği
graph_analysis_result = analyze_graph('start_user', 2)
print("Graph Analysis Result:")
print(graph_analysis_result)

(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Kullanıcıları ve ilgi alanlarını saklama
users = {}
interests = defaultdict(list)

# Graf oluşturma
G = nx.DiGraph()

for user_data in data:
    username = user_data['username']
    users[username] = user_data
    G.add_node(username)
    
    for following in user_data['following']:
        G.add_edge(username, following)
        
    for tweet in user_data['tweets']:
        for word in tweet.split():
            interests[word].append(username)

# İlgi alanına göre arama
def search_interest(interest):
    return interests.get(interest, None)

# Ortak ilgi alanlarına sahip kullanıcıları bulma
def common_interests(user1, user2):
    user1_interests = set(word for tweet in users[user1]['tweets'] for word in tweet.split())
    user2_interests = set(word for tweet in users[user2]['tweets'] for word in tweet.split())
    return user1_interests & user2_interests

# İki kullanıcı arasında bir yol olup olmadığını kontrol etme
def has_path(user1, user2):
    return nx.has_path(G, user1, user2)

# Minimum Spanning Tree oluşturma
def minimum_spanning_tree():
    return nx.minimum_spanning_tree(G.to_undirected())
interest = 'Python'
users_with_interest = search_interest(interest)
if users_with_interest:
    print(f"Kullanıcılar {interest} ilgi alanina sahip: {users_with_interest}")
else:
    print(f"{interest} ilgi alanina sahip hiçbir kullanici bulunamadi.")
# Kullanıcı istatistikleri için fonksiyon
def user_statistics(username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data['followers'])
        following_count = len(user_data['following'])
        tweet_count = len(user_data['tweets'])

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph():
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()

# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input():
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = search_interest(interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

# Kullanıcı istatistikleri örneği
user_statistics('sample_username')

# Graf görselleştirme örneği
visualize_graph()

# Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
search_interest_by_user_input()
-----------------------------------------------------------------------------------------
3.güncelleme
import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt
(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

class User:
    def __init__(self, username, full_name, followers_count, following_count, language, region, tweets, following, followers):
        self.username = username
        self.full_name = full_name
        self.followers_count = followers_count
        self.following_count = following_count
        self.language = language
        self.region = region
        self.tweets = tweets
        self.following = following
        self.followers = followers

# Kullanıcı verilerini çekme
def fetch_user_data():
    url = "https://db.fastqr.co/twitter_data_en_30K.json"
    response = requests.get(url)
    data = response.json()
    return data

# Kullanıcıları ve ilgi alanlarını saklama
def build_user_graph(data):
    users = {}
    interests = defaultdict(list)
    G = nx.DiGraph()

    for user_data in data:
        username = user_data['username']
        full_name = user_data.get('full_name', '')  # full_name alanı olmayan durumları ele al
        followers_count = user_data.get('followers_count', 0)
        following_count = user_data.get('following_count', 0)
        language = user_data.get('language', '')
        region = user_data.get('region', '')
        tweets = user_data.get('tweets', [])
        following = user_data.get('following', [])
        followers = user_data.get('followers', [])
        user_obj = User(
            username,
            full_name,
            followers_count,
            following_count,
            language,
            region,
            tweets,
            following,
            followers
        )
        users[username] = user_obj
        G.add_node(username)

        for following in user_obj.following:
            G.add_edge(username, following)

        for tweet in user_obj.tweets:
            for word in tweet.split():
                interests[word].append(username)

    return users, interests, G

# Kullanıcı istatistikleri
def user_statistics(users, username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data.followers)
        following_count = len(user_data.following)
        tweet_count = len(user_data.tweets)

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph(G):
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()

# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = search_interest(interests, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

# İlgi alanına göre eşleme
def search_interest(interests, interest):
    return interests.get(interest, None)

# Belirli bölge ve dil için trend olan hashtagler
def trending_hashtags(users, region, language):
    hashtags = defaultdict(int)

    for user_obj in users.values():
        if user_obj.region == region and user_obj.language == language:
            for tweet in user_obj.tweets:
                words = [word.strip("#") for word in tweet.split() if word.startswith("#")]
                for hashtag in words:
                    hashtags[hashtag] += 1

    sorted_hashtags = sorted(hashtags.items(), key=lambda x: x[1], reverse=True)
    return sorted_hashtags

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme
def common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = [username for username in common_followers if search_interest(users, username)]
    return common_interest_users

# Graf Üzerinde Analiz
def analyze_graph(G, start_user, level):
    result = list(nx.bfs_edges(G, source=start_user, depth_limit=level))
    return result

def main():
    # Kullanıcı verilerini çekme
    data = fetch_user_data()

    # Kullanıcıları ve ilgi alanlarını saklama
    users, interests, G = build_user_graph(data)

    # Kullanıcı istatistikleri örneği
    user_statistics(users, 'gharber')

    # Graf görselleştirme örneği
    visualize_graph(G)

    # Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
    search_interest_by_user_input(interests)

    # Belirli bölge ve dil için trend olan hashtagler örneği
    trending = trending_hashtags(users, "Region1", "English")
    print("Trending Hashtags:")
    for hashtag, count in trending[:5]:
        print(f"{hashtag}: {count} tweets")

    # Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme örneği
    common_interest_users = common_interest_followers(users, 'user1', 'user2')
    print("Common Interest Followers:")
    print(common_interest_users)

    # Graf Üzerinde Analiz örneği
    graph_analysis_result = analyze_graph(G, 'start_user', 2)
    print("Graph Analysis Result:")
    print(graph_analysis_result)

if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------
4.güncelleme
import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt
(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

class User:
    def __init__(self, username, full_name, followers_count, following_count, language, region, tweets, following, followers,user_interests):
        self.username = username
        self.full_name = full_name
        self.followers_count = followers_count
        self.following_count = following_count
        self.language = language
        self.region = region
        self.tweets = tweets
        self.following = following
        self.followers = followers
        self.user_interests=user_interests   # Kullanıcının ilgi alanları

# Kullanıcı verilerini çekme
def fetch_user_data():
    url = "https://db.fastqr.co/twitter_data_en_30K.json"
    response = requests.get(url)
    data = response.json()
    return data

# Kullanıcıları ve ilgi alanlarını saklama
def build_user_graph(data):
    users = {}
    interests = defaultdict(list)
    G = nx.DiGraph()

    for user_data in data:
        username = user_data['username']
        full_name = user_data.get('full_name', '')  # full_name alanı olmayan durumları ele al
        followers_count = user_data.get('followers_count', 0)
        following_count = user_data.get('following_count', 0)
        language = user_data.get('language', '')
        region = user_data.get('region', '')
        tweets = user_data.get('tweets', [])
        following = user_data.get('following', [])
        followers = user_data.get('followers', [])
        user_interests = []

        for tweet in tweets:
            for word in tweet.split():
                interests[word].append(username)
                user_interests.append(word)
        user_obj = User(
            username,
            full_name,
            followers_count,
            following_count,
            language,
            region,
            tweets,
            following,
            followers,
            user_interests=[]  # Boş bir liste olarak başlatıyoruz, çünkü ilgi alanlarını daha sonra dolduracağız
        )
        users[username] = user_obj
        G.add_node(username)

        for following in user_obj.following:
            G.add_edge(username, following)

      

    return users, interests, G

# Kullanıcı istatistikleri
def user_statistics(users, username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data.followers)
        following_count = len(user_data.following)
        tweet_count = len(user_data.tweets)

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph(G):
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()

# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = search_interest(interests, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

# İlgi alanına göre eşleme
def search_interest(interests, interest):
    return interests.get(interest, None)

# Belirli bölge ve dil için trend olan hashtagler
def trending_hashtags(users, region, language):
    hashtags = defaultdict(int)

    for user_obj in users.values():
        if user_obj.region == region and user_obj.language == language:
            for tweet in user_obj.tweets:
                words = [word.strip("#") for word in tweet.split() if word.startswith("#")]
                for hashtag in words:
                    hashtags[hashtag] += 1

    sorted_hashtags = sorted(hashtags.items(), key=lambda x: x[1], reverse=True)
    return sorted_hashtags

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme
def common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = [username for username in common_followers if search_interest(users, username)]
    return common_interest_users

# Graf Üzerinde Analiz
def analyze_graph(G, start_user, level):
    result = list(nx.bfs_edges(G, source=start_user, depth_limit=level))
    return result

def main():
    # Kullanıcı verilerini çekme
    data = fetch_user_data()

    # Kullanıcıları ve ilgi alanlarını saklama
    users, interests, G = build_user_graph(data)

    # Kullanıcı istatistikleri örneği
    user_statistics(users, 'gharber')

    # Graf görselleştirme örneği
    visualize_graph(G)

    # Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
    search_interest_by_user_input(interests)

    # Belirli bölge ve dil için trend olan hashtagler örneği
    trending = trending_hashtags(users, "Region1", "English")
    print("Trending Hashtags:")
    for hashtag, count in trending[:5]:
        print(f"{hashtag}: {count} tweets")

    # Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme örneği
    common_interest_users = common_interest_followers(users, 'user1', 'user2')
    print("Common Interest Followers:")
    print(common_interest_users)

    # Graf Üzerinde Analiz örneği
    graph_analysis_result = analyze_graph(G, 'start_user', 2)
    print("Graph Analysis Result:")
    print(graph_analysis_result)
    # Detaylı analiz raporları oluşturma
    create_detailed_analysis_report(users)

def create_detailed_analysis_report(users):
    # Kullanıcı ilgi alanlarına dayalı detaylı analiz raporu oluştur
    for username, user_obj in users.items():
        print(f"\nDetaylı Analiz Raporu - {username}")
        print(f"Takipçi Sayısı: {user_obj.followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {user_obj.following_count}")
        print(f"Toplam Tweet Sayısı: {len(user_obj.tweets)}")
        print(f"Takipçi/Takip Oranı: {user_obj.followers_count / (user_obj.following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
        print(f"Ilgi Alanları: {', '.join(user_obj.interests)}")

if __name__ == "__main__":
    main()
-----------------------------------------------------------------
5.güncelleme

import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt
(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

class User:
    def __init__(self, username, full_name, followers_count, following_count, language, region, tweets, following, followers,user_interests):
        self.username = username
        self.full_name = full_name
        self.followers_count = followers_count
        self.following_count = following_count
        self.language = language
        self.region = region
        self.tweets = tweets
        self.following = following
        self.followers = followers
        self.user_interests=user_interests   # Kullanıcının ilgi alanları














def find_common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = []

    for username in common_followers:
        if users[user1].user_interests and users[user2].user_interests:
            common_interests = set(users[user1].user_interests) & set(users[user2].user_interests)
            if common_interests:
                common_interest_users.append(username)

    return common_interest_users




def users_with_interest(users, interest):
    return [username for username, user_obj in users.items() if interest in user_obj.user_interests]


def find_users_with_common_interest(users, target_user):
    target_interests = users[target_user].user_interests
    users_with_common_interest = []

    for username, user_obj in users.items():
        if username != target_user:
            common_interests = set(target_interests) & set(user_obj.user_interests)
            if common_interests:
                users_with_common_interest.append(username)

    return users_with_common_interest




# Kullanıcı verilerini çekme
def fetch_user_data():
    url = "https://db.fastqr.co/twitter_data_en_30K.json"
    response = requests.get(url)
    data = response.json()
    return data

# Kullanıcıları ve ilgi alanlarını saklama
def build_user_graph(data):
    users = {}
    interests = defaultdict(list)
    G = nx.DiGraph()

    for user_data in data:
        username = user_data['username']
        full_name = user_data.get('full_name', '')  # full_name alanı olmayan durumları ele al
        followers_count = user_data.get('followers_count', 0)
        following_count = user_data.get('following_count', 0)
        language = user_data.get('language', '')
        region = user_data.get('region', '')
        tweets = user_data.get('tweets', [])
        following = user_data.get('following', [])
        followers = user_data.get('followers', [])
        user_interests = []

        for tweet in tweets:
            for word in tweet.split():
                interests[word].append(username)
                user_interests.append(word)
        user_obj = User(
            username,
            full_name,
            followers_count,
            following_count,
            language,
            region,
            tweets,
            following,
            followers,
            user_interests # Boş bir liste olarak başlatıyoruz, çünkü ilgi alanlarını daha sonra dolduracağız
        )
        users[username] = user_obj
        G.add_node(username)

        for following in user_obj.following:
            G.add_edge(username, following)

      

    return users, interests, G

# Kullanıcı istatistikleri
def user_statistics(users, username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data.followers)
        following_count = len(user_data.following)
        tweet_count = len(user_data.tweets)

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph(G):
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()

# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = search_interest(interests, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

# İlgi alanına göre eşleme
def search_interest(interests, interest):
    return interests.get(interest, None)

# Belirli bölge ve dil için trend olan hashtagler
def trending_hashtags(users, region, language):
    hashtags = defaultdict(int)

    for user_obj in users.values():
        if user_obj.region == region and user_obj.language == language:
            for tweet in user_obj.tweets:
                words = [word.strip("#") for word in tweet.split() if word.startswith("#")]
                for hashtag in words:
                    hashtags[hashtag] += 1

    sorted_hashtags = sorted(hashtags.items(), key=lambda x: x[1], reverse=True)
    with open("trending_hashtags.txt", "w", encoding="utf-8") as file:
        file.write("Trending Hashtags:\n")
        for hashtag, count in sorted_hashtags[:5]:
            file.write(f"{hashtag}: {count} tweets\n")

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme
def common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = [username for username in common_followers if search_interest(users, username)]
    with open("common_interest_followers.txt", "w", encoding="utf-8") as file:
        file.write("Common Interest Followers:\n")
        for user in common_interest_users:
            file.write(user + "\n")

# Graf Üzerinde Analiz
def analyze_graph(G, start_user, level):
    result = list(nx.bfs_edges(G, source=start_user, depth_limit=level))
    return result

def main():
    # Kullanıcı verilerini çekme
    data = fetch_user_data()

    # Kullanıcıları ve ilgi alanlarını saklama
    users, interests, G = build_user_graph(data)

    # Kullanıcı istatistikleri örneği
    user_statistics(users, 'gharber')

    # Graf görselleştirme örneği
    visualize_graph(G)

    # Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
    search_interest_by_user_input(interests)

    # Belirli bölge ve dil için trend olan hashtagler örneği
    trending = trending_hashtags(users, "Region1", "English")
    print("Trending Hashtags:")
    for hashtag, count in trending[:5]:
        print(f"{hashtag}: {count} tweets")

    # Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme örneği
    common_interest_users = common_interest_followers(users, 'tortiz', 'gharber')
    print("Common Interest Followers:")
    print(common_interest_users)

    # Graf Üzerinde Analiz örneği
    graph_analysis_result = analyze_graph(G, 'start_user', 2)
    print("Graph Analysis Result:")
    print(graph_analysis_result)
    # Detaylı analiz raporları oluşturma
    create_detailed_analysis_report(users)

def create_detailed_analysis_report(users):
    # Kullanıcı ilgi alanlarına dayalı detaylı analiz raporu oluştur
    with open("detailed_analysis_report.txt", "w", encoding="utf-8") as file:
     for username, user_obj in users.items():
            file.write(f"\nDetaylı Analiz Raporu - {username}\n")
            file.write(f"Takipçi Sayısı: {user_obj.followers_count}\n")
            file.write(f"Takip Ettiği Kullanıcı Sayısı: {user_obj.following_count}\n")
            file.write(f"Toplam Tweet Sayısı: {len(user_obj.tweets)}\n")
            file.write(f"Takipçi/Takip Oranı: {user_obj.followers_count / (user_obj.following_count + 1)}\n")
            file.write(f"Ilgi Alanları: {', '.join(user_obj.user_interests)}\n")
# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests,users):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = users_with_interest(users, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------

import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt
(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

class User:
    def __init__(self, username, full_name, followers_count, following_count, language, region, tweets, following, followers,user_interests):
        self.username = username
        self.full_name = full_name
        self.followers_count = followers_count
        self.following_count = following_count
        self.language = language
        self.region = region
        self.tweets = tweets
        self.following = following
        self.followers = followers
        self.user_interests=user_interests   # Kullanıcının ilgi alanları














def find_common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = []

    for username in common_followers:
        if users[user1].user_interests and users[user2].user_interests:
            common_interests = set(users[user1].user_interests) & set(users[user2].user_interests)
            if common_interests:
                common_interest_users.append(username)

    return common_interest_users




def users_with_interest(users, interest):
    return [username for username, user_obj in users.items() if interest in user_obj.user_interests]


def find_users_with_common_interest(users, target_user):
    target_interests = users[target_user].user_interests
    users_with_common_interest = []

    for username, user_obj in users.items():
        if username != target_user:
            common_interests = set(target_interests) & set(user_obj.user_interests)
            if common_interests:
                users_with_common_interest.append(username)

    return users_with_common_interest




# Kullanıcı verilerini çekme
def fetch_user_data():
    url = "https://db.fastqr.co/twitter_data_en_30K.json"
    response = requests.get(url)
    data = response.json()
    return data

# Kullanıcıları ve ilgi alanlarını saklama
def build_user_graph(data):
    users = {}
    interests = defaultdict(list)
    G = nx.DiGraph()

    for user_data in data:
        username = user_data['username']
        full_name = user_data.get('full_name', '')  # full_name alanı olmayan durumları ele al
        followers_count = user_data.get('followers_count', 0)
        following_count = user_data.get('following_count', 0)
        language = user_data.get('language', '')
        region = user_data.get('region', '')
        tweets = user_data.get('tweets', [])
        following = user_data.get('following', [])
        followers = user_data.get('followers', [])
        user_interests = []

        for tweet in tweets:
            for word in tweet.split():
                interests[word].append(username)
                user_interests.append(word)
        user_obj = User(
            username,
            full_name,
            followers_count,
            following_count,
            language,
            region,
            tweets,
            following,
            followers,
            user_interests # Boş bir liste olarak başlatıyoruz, çünkü ilgi alanlarını daha sonra dolduracağız
        )
        users[username] = user_obj
        G.add_node(username)

        for following in user_obj.following:
            G.add_edge(username, following)

      

    return users, interests, G

# Kullanıcı istatistikleri
def user_statistics(users, username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data.followers)
        following_count = len(user_data.following)
        tweet_count = len(user_data.tweets)

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph(G):
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()

# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = search_interest(interests, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

# İlgi alanına göre eşleme
def search_interest(interests, interest):
    return interests.get(interest, None)

# Belirli bölge ve dil için trend olan hashtagler
def trending_hashtags(users, region, language):
    hashtags = defaultdict(int)

    for user_obj in users.values():
        if user_obj.region == region and user_obj.language == language:
            for tweet in user_obj.tweets:
                words = [word.strip("#") for word in tweet.split() if word.startswith("#")]
                for hashtag in words:
                    hashtags[hashtag] += 1

    sorted_hashtags = sorted(hashtags.items(), key=lambda x: x[1], reverse=True)
    with open("trending_hashtags.txt", "w", encoding="utf-8") as file:
        file.write("Trending Hashtags:\n")
        for hashtag, count in sorted_hashtags[:5]:
            file.write(f"{hashtag}: {count} tweets\n")

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme
def common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = [username for username in common_followers if search_interest(users, username)]
    with open("common_interest_followers.txt", "w", encoding="utf-8") as file:
        file.write("Common Interest Followers:\n")
        for user in common_interest_users:
            file.write(user + "\n")

# Graf Üzerinde Analiz
def analyze_graph(G, start_user, level):
    result = list(nx.bfs_edges(G, source=start_user, depth_limit=level))
    return result

def main():
    # Kullanıcı verilerini çekme
    data = fetch_user_data()

    # Kullanıcıları ve ilgi alanlarını saklama
    users, interests, G = build_user_graph(data)
    
# Kullanıcı adı girişiyle istatistik sorgulama
    while True:
        username_input = input("Kullanıcı adı girin (Çıkmak için 'q' tuşuna basın): ")
        if username_input.lower() == 'q':
            break  # Programdan çıkış
        elif username_input in users:
            user_statistics(users, username_input)
        else:
            print(f"{username_input} adlı kullanıcı bulunamadı.")

   
    # Graf görselleştirme örneği
    visualize_graph(G)

    # Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
    search_interest_by_user_input(interests)

    # Belirli bölge ve dil için trend olan hashtagler örneği
    trending = trending_hashtags(users, "Region1", "English")
    print("Trending Hashtags:")
    for hashtag, count in trending[:5]:
        print(f"{hashtag}: {count} tweets")

    # Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme örneği
    common_interest_users = common_interest_followers(users, 'tortiz', 'gharber')
    print("Common Interest Followers:")
    print(common_interest_users)

    # Graf Üzerinde Analiz örneği
    graph_analysis_result = analyze_graph(G, 'start_user', 2)
    print("Graph Analysis Result:")
    print(graph_analysis_result)
    # Detaylı analiz raporları oluşturma
    create_detailed_analysis_report(users)

def create_detailed_analysis_report(users):
    # Kullanıcı ilgi alanlarına dayalı detaylı analiz raporu oluştur
    with open("detailed_analysis_report.txt", "w", encoding="utf-8") as file:
     for username, user_obj in users.items():
            file.write(f"\nDetaylı Analiz Raporu - {username}\n")
            file.write(f"Takipçi Sayısı: {user_obj.followers_count}\n")
            file.write(f"Takip Ettiği Kullanıcı Sayısı: {user_obj.following_count}\n")
            file.write(f"Toplam Tweet Sayısı: {len(user_obj.tweets)}\n")
            file.write(f"Takipçi/Takip Oranı: {user_obj.followers_count / (user_obj.following_count + 1)}\n")
            file.write(f"Ilgi Alanları: {', '.join(user_obj.user_interests)}\n")
# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests,users):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = users_with_interest(users, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

if __name__ == "__main__":
    main()
-----------------------------------------------------------------------------------------

import networkx as nx
import json
import requests
from collections import defaultdict
import sys
import matplotlib.pyplot as plt
(''')
# Veriyi okumak icin çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# İlk 10 öğeyi alma
first_10_items = data[:10]

# İlk 10 öğeyi yazdırma
for i, item in enumerate(first_10_items, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")


# Veriyi çekme
url = "https://db.fastqr.co/twitter_data_en_30K.json"
response = requests.get(url)
data = response.json()

# Tüm öğeleri yazdırma
for i, item in enumerate(data, start=1):
    print(f"Öğe {i}: {json.dumps(item, indent=2)}")

 (''')

class User:
    def __init__(self, username, full_name, followers_count, following_count, language, region, tweets, following, followers,user_interests):
        self.username = username
        self.full_name = full_name
        self.followers_count = followers_count
        self.following_count = following_count
        self.language = language
        self.region = region
        self.tweets = tweets
        self.following = following
        self.followers = followers
        self.user_interests=user_interests   # Kullanıcının ilgi alanları



interests_hash_tables = {}

def find_common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = []
    for username in common_followers:
        if users[user1].user_interests and users[user2].user_interests:
            common_interests = set(users[user1].user_interests) & set(users[user2].user_interests)
            if common_interests:
                common_interest_users.append(username)

    return common_interest_users




def users_with_interest(users, interest):
    return [username for username, user_obj in users.items() if interest in user_obj.user_interests]


def find_users_with_common_interest(users, target_user):
    target_interests = users[target_user].user_interests
    users_with_common_interest = []

    for username, user_obj in users.items():
        if username != target_user:
            common_interests = set(target_interests) & set(user_obj.user_interests)
            if common_interests:
                users_with_common_interest.append(username)

    return users_with_common_interest




# Kullanıcı verilerini çekme
def fetch_user_data():
    url = "https://db.fastqr.co/twitter_data_en_30K.json"
    response = requests.get(url)
    data = response.json()
    return data

# Kullanıcıları ve ilgi alanlarını saklama
def build_user_graph(data,interests_hash_tables):
    users = {}
    
    G = nx.DiGraph()

    for user_data in data:
        username = user_data['username']
        full_name = user_data.get('full_name', '')  # full_name alanı olmayan durumları ele al
        followers_count = user_data.get('followers_count', 0)
        following_count = user_data.get('following_count', 0)
        language = user_data.get('language', '')
        region = user_data.get('region', '')
        tweets = user_data.get('tweets', [])
        following = user_data.get('following', [])
        followers = user_data.get('followers', [])
        user_interests = []

        for tweet in tweets:
            for word in tweet.split():
              if word not in interests_hash_tables:
                   interests_hash_tables[word] = {}
            interests_hash_tables[word][username] = users.get(username, None)
            user_interests.append(word)
        user_obj = User(
            username,
            full_name,
            followers_count,
            following_count,
            language,
            region,
            tweets,
            following,
            followers,
            user_interests # Boş bir liste olarak başlatıyoruz, çünkü ilgi alanlarını daha sonra dolduracağız
        )
        users[username] = user_obj
        G.add_node(username)

        for following_user in user_obj.following:
            G.add_edge(username, following_user)

      

    return users,interests_hash_tables, G

def find_users_with_interest(users,interests_hash_tables,interest):
    return list(interests_hash_tables.get(interest, {}).values())






# Kullanıcı istatistikleri
def user_statistics(users, username):
    user_data = users.get(username)
    if user_data:
        followers_count = len(user_data.followers)
        following_count = len(user_data.following)
        tweet_count = len(user_data.tweets)

        print(f"{username} istatistikleri:")
        print(f"Takipçi Sayısı: {followers_count}")
        print(f"Takip Ettiği Kullanıcı Sayısı: {following_count}")
        print(f"Toplam Tweet Sayısı: {tweet_count}")
        print(f"Takipçi/Takip Oranı: {followers_count / (following_count + 1)}")  # Sıfıra bölme hatasını önlemek için +1 ekledik
    else:
        print(f"{username} adlı kullanıcı bulunamadı.")

# Graf görselleştirme
def visualize_graph(G):
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, font_size=8, node_size=300, node_color='skyblue', font_color='black', font_weight='bold')
    plt.title("Twitter Kullanıcıları ve İlişkileri")
    plt.show()



# İlgi alanına göre eşleme
def search_interest(interests, interest):
    return interests.get(interest, None)

# Belirli bölge ve dil için trend olan hashtagler
def trending_hashtags(users, region, language):
    hashtags = defaultdict(int)

    for user_obj in users.values():
        if user_obj.region == region and user_obj.language == language:
            for tweet in user_obj.tweets:
                words = [word.strip("#") for word in tweet.split() if word.startswith("#")]
                for hashtag in words:
                    hashtags[hashtag] += 1

    sorted_hashtags = sorted(hashtags.items(), key=lambda x: x[1], reverse=True)
    with open("trending_hashtags.txt", "w", encoding="utf-8") as file:
        file.write("Trending Hashtags:\n")
        for hashtag, count in sorted_hashtags[:5]:
            file.write(f"{hashtag}: {count} tweets\n")

# Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme
def common_interest_followers(users, user1, user2):
    common_followers = set(users[user1].followers) & set(users[user2].followers)
    common_interest_users = [username for username in common_followers if search_interest(users, username)]
    with open("common_interest_followers.txt", "w", encoding="utf-8") as file:
        file.write("Common Interest Followers:\n")
        for user in common_interest_users:
            file.write(user + "\n")

# Graf Üzerinde Analiz
def analyze_graph(G, start_user, level):
    result = list(nx.bfs_edges(G, source=start_user, depth_limit=level))
    return result

def main():
    # Kullanıcı verilerini çekme
    data = fetch_user_data()
    global interests_hash_tables
    # Kullanıcıları ve ilgi alanlarını saklama
    users, interests_hash_tables, G= build_user_graph(data,interests_hash_tables)

# Kullanıcı adı girişiyle istatistik sorgulama
    while True:
        username_input = input("Kullanıcı adı girin (Çıkmak için 'q' tuşuna basın): ")
        if username_input.lower() == 'q':
            break  # Programdan çıkış
        elif username_input in users:
            user_statistics(users, username_input)
        else:
            print(f"{username_input} adlı kullanıcı bulunamadı.")

   
    # Graf görselleştirme örneği
    visualize_graph(G)

    # Kullanıcı girişiyle ilgi alanına göre arama yapma örneği
    search_interest_by_user_input(interests_hash_tables,users)

    # Belirli bölge ve dil için trend olan hashtagler örneği
    trending = trending_hashtags(users, "Region1", "English")
    print("Trending Hashtags:")
    for hashtag, count in trending[:5]:
        print(f"{hashtag}: {count} tweets")

    # Belirli iki kullanıcının takipçilerinden ilgi alanına göre filtreleme örneği
    common_interest_users = common_interest_followers(users, 'tortiz', 'gharber')
    print("Common Interest Followers:")
    print(common_interest_users)

    # Graf Üzerinde Analiz örneği
    graph_analysis_result = analyze_graph(G, 'start_user', 2)
    print("Graph Analysis Result:")
    print(graph_analysis_result)
    # Detaylı analiz raporları oluşturma
    create_detailed_analysis_report(users)

def create_detailed_analysis_report(users,interests_hash_tables):
    # Kullanıcı ilgi alanlarına dayalı detaylı analiz raporu oluştur
    with open("detailed_analysis_report.txt", "w", encoding="utf-8") as file:
     for username, user_obj in users.items():
            file.write(f"\nDetaylı Analiz Raporu - {username}\n")
            file.write(f"Takipçi Sayısı: {user_obj.followers_count}\n")
            file.write(f"Takip Ettiği Kullanıcı Sayısı: {user_obj.following_count}\n")
            file.write(f"Toplam Tweet Sayısı: {len(user_obj.tweets)}\n")
            file.write(f"Takipçi/Takip Oranı: {user_obj.followers_count / (user_obj.following_count + 1)}\n")
            file.write(f"Ilgi Alanları: {', '.join(user_obj.user_interests)}\n")

             # Ilgi alanlarına göre kullanıcıları listeleme
            for interest in user_obj.user_interests:
                interest_users = list(interests_hash_tables.get(interest, {}).values())
                file.write(f"\nKullanıcılar İlgi Alanı '{interest}' için:\n")
                for interest_user in interest_users:
                    file.write(f"- {interest_user.username}\n")


# Kullanıcı girişiyle ilgi alanına göre arama yapma
def search_interest_by_user_input(interests,users):
    interest_input = input("Arama yapmak istediğiniz ilgi alanını girin: ")
    users_with_interest = users_with_interest(users, interest_input)
    if users_with_interest:
        print(f"Kullanıcılar {interest_input} ilgi alanına sahip: {users_with_interest}")
    else:
        print(f"{interest_input} ilgi alanına sahip hiçbir kullanıcı bulunamadı.")

if __name__ == "__main__":
    main()
